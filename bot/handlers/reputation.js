import { pool } from '../services/database.js';
import { formatDistanceToNow } from 'date-fns';
import ruLocale from 'date-fns/locale/ru/index.js';

// Store cooldowns and daily limits in memory
const reputationCooldowns = new Map();
const dailyReputationCount = new Map();

export const handleReputation = async (ctx) => {
  try {
    // Check if it's a reply with reputation trigger
    if (!ctx.message?.reply_to_message || !ctx.message.text) return;
    
    const text = ctx.message.text.toLowerCase();
    const triggers = ['+—Ä–µ–ø', '+rep', '+', '—Å–ø–∞—Å–∏–±–æ', 'thanks', '—Å–ø—Å', '–±–ª–∞–≥–æ–¥–∞—Ä—é'];
    
    const isReputationMessage = triggers.some(trigger => {
      if (trigger === '+') {
        return text === trigger;
      }
      return text.includes(trigger);
    });
    
    if (!isReputationMessage) return;
    
    const giverId = ctx.from.id;
    const receiverId = ctx.message.reply_to_message.from.id;
    
    // Can't give reputation to yourself
    if (giverId === receiverId) {
      return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –ø–æ–≤—ã—à–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ!');
    }
    
    // Can't give reputation to bots
    if (ctx.message.reply_to_message.from.is_bot) {
      return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –¥–∞–≤–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –±–æ—Ç–∞–º!');
    }
    
    // Check cooldown (8 hours)
    const lastGiven = reputationCooldowns.get(giverId);
    if (lastGiven) {
      const hoursSinceLastGiven = (Date.now() - lastGiven) / (1000 * 60 * 60);
      if (hoursSinceLastGiven < 8) {
        const hoursLeft = Math.ceil(8 - hoursSinceLastGiven);
        const minutesLeft = Math.ceil((8 - hoursSinceLastGiven) * 60);
        
        let timeMessage = '';
        if (hoursLeft >= 1) {
          timeMessage = `${hoursLeft} ${hoursLeft === 1 ? '—á–∞—Å' : hoursLeft < 5 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤'}`;
        } else {
          timeMessage = `${minutesLeft} ${minutesLeft === 1 ? '–º–∏–Ω—É—Ç—É' : minutesLeft < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'}`;
        }
        
        return ctx.reply(`‚è≥ –¢—ã —Å–º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ ${timeMessage}`);
      }
    }
    
    // Check daily limit for receiver (10 per day)
    const receiverDailyKey = `${receiverId}_${new Date().toDateString()}`;
    const dailyCount = dailyReputationCount.get(receiverDailyKey) || 0;
    if (dailyCount >= 10) {
      return ctx.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –º–∞–∫—Å–∏–º—É–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ —Å—É—Ç–∫–∏!');
    }
    
    const connection = await pool.getConnection();
    try {
      // Ensure users exist in database
      await ensureUser(connection, giverId, ctx.from);
      await ensureUser(connection, receiverId, ctx.message.reply_to_message.from);
      
      // Update reputation
      await connection.execute(
        'UPDATE users SET reputation = reputation + 1 WHERE telegram_id = ?',
        [receiverId]
      );
      
      // Log reputation
      await connection.execute(
        `INSERT INTO reputation_logs (giver_id, receiver_id) 
         SELECT u1.id, u2.id FROM users u1, users u2 
         WHERE u1.telegram_id = ? AND u2.telegram_id = ?`,
        [giverId, receiverId]
      );
      
      // Get updated reputation
      const [rows] = await connection.execute(
        'SELECT reputation FROM users WHERE telegram_id = ?',
        [receiverId]
      );
      
      const newReputation = rows[0].reputation;
      
      // Update cooldowns
      reputationCooldowns.set(giverId, Date.now());
      dailyReputationCount.set(receiverDailyKey, dailyCount + 1);
      
      // Send success message
      const giverName = ctx.from.first_name || ctx.from.username || '–ê–Ω–æ–Ω–∏–º';
      const receiverName = ctx.message.reply_to_message.from.first_name || 
                          ctx.message.reply_to_message.from.username || '–ê–Ω–æ–Ω–∏–º';
      
      ctx.reply(
        `‚ú® ${giverName} –ø–æ–≤—ã—Å–∏–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é –Ω–∞ +1 ${receiverName}!\n` +
        `–¢–µ–ø–µ—Ä—å —É —á—É–≤–∞–∫–∞ ${newReputation} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ üî•`,
        { reply_to_message_id: ctx.message.reply_to_message.message_id }
      );
      
      // Check for achievements
      await checkAchievements(connection, receiverId, newReputation, ctx);
      
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('Reputation error:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏');
  }
};

// Ensure user exists in database
async function ensureUser(connection, telegramId, userData) {
  const [existing] = await connection.execute(
    'SELECT id FROM users WHERE telegram_id = ?',
    [telegramId]
  );
  
  if (existing.length === 0) {
    await connection.execute(
      `INSERT INTO users (telegram_id, username, first_name, last_name) 
       VALUES (?, ?, ?, ?)`,
      [
        telegramId,
        userData.username || null,
        userData.first_name || null,
        userData.last_name || null
      ]
    );
  } else {
    // Update user info
    await connection.execute(
      `UPDATE users SET 
       username = ?, first_name = ?, last_name = ?, last_active = CURRENT_TIMESTAMP
       WHERE telegram_id = ?`,
      [
        userData.username || null,
        userData.first_name || null,
        userData.last_name || null,
        telegramId
      ]
    );
  }
}

// Check for reputation achievements
async function checkAchievements(connection, telegramId, reputation, ctx) {
  const milestones = [10, 25, 50, 100, 250, 500, 1000];
  
  if (milestones.includes(reputation)) {
    const [users] = await connection.execute(
      'SELECT first_name, username FROM users WHERE telegram_id = ?',
      [telegramId]
    );
    
    const name = users[0].first_name || users[0].username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    let achievement = '';
    switch(reputation) {
      case 10: achievement = 'üåü –ù–æ–≤–∏—á–æ–∫ (10 —Ä–µ–ø.)'; break;
      case 25: achievement = '‚≠ê –ê–∫—Ç–∏–≤–∏—Å—Ç (25 —Ä–µ–ø.)'; break;
      case 50: achievement = 'üèÜ –ó–≤–µ–∑–¥–∞ (50 —Ä–µ–ø.)'; break;
      case 100: achievement = 'üíØ –°–æ—Ç–∫–∞ (100 —Ä–µ–ø.)'; break;
      case 250: achievement = 'üéØ –ú–∞—Å—Ç–µ—Ä (250 —Ä–µ–ø.)'; break;
      case 500: achievement = 'üëë –õ–µ–≥–µ–Ω–¥–∞ (500 —Ä–µ–ø.)'; break;
      case 1000: achievement = 'üî• –ë–û–ì –î–í–ò–ñ–ê (1000 —Ä–µ–ø.)'; break;
    }
    
    ctx.reply(
      `üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâ\n\n` +
      `${name} –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n` +
      `${achievement}\n\n` +
      `–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –¥–≤–∏–∂–Ω—è–∫! üî•`
    );
  }
}

// Reset daily limits
export const resetDailyLimits = async () => {
  dailyReputationCount.clear();
  console.log('‚úÖ Daily reputation limits reset');
};