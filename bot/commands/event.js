import { pool } from '../services/database.js';

export const eventCommand = async (ctx) => {
  try {
    // Get upcoming events
    const [events] = await pool.execute(
      `SELECT e.*, COUNT(er.user_id) as participant_count
       FROM events e
       LEFT JOIN event_registrations er ON e.id = er.event_id
       WHERE e.status = 'upcoming'
       GROUP BY e.id
       ORDER BY e.event_date ASC
       LIMIT 5`
    );
    
    if (events.length === 0) {
      return ctx.reply(
        'üìÖ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n\n' +
        `üåê –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ: ${process.env.SITE_URL}/events`
      );
    }
    
    let message = 'üìÖ *–ë–õ–ò–ñ–ê–ô–®–ò–ï –°–û–ë–´–¢–ò–Ø* üìÖ\n\n';
    
    events.forEach((event, index) => {
      const eventDate = new Date(event.event_date);
      const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', 
                     '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
      const day = eventDate.getDate();
      const month = months[eventDate.getMonth()];
      const hours = eventDate.getHours().toString().padStart(2, '0');
      const minutes = eventDate.getMinutes().toString().padStart(2, '0');
      
      const dateStr = `${day} ${month}, ${hours}:${minutes}`;
      
      message += `${index + 1}. *${event.title}*\n`;
      message += `üìÜ ${dateStr}\n`;
      message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${event.participant_count}`;
      if (event.max_participants) {
        message += `/${event.max_participants}`;
      }
      message += '\n';
      message += `üí∞ ${event.price > 0 ? `${event.price} —Å–æ–º` : '–ë–ï–°–ü–õ–ê–¢–ù–û'}\n`;
      message += `üîó ${process.env.SITE_URL}/events/${event.id}\n\n`;
    });
    
    message += `üåê –í—Å–µ —Å–æ–±—ã—Ç–∏—è: ${process.env.SITE_URL}/events`;
    
    ctx.replyWithMarkdown(message);
  } catch (error) {
    console.error('Event command error:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π');
  }
};